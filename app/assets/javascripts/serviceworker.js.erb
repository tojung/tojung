<% require 'uri' %>
var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
    fetch('https://t1.daumcdn.net/postcode/api/core/180619/1529384927473/180619.js', {
        mode: 'no-cors'
    }).then(function(response) {
        console.log(response.type); // "opaque"
        console.log("cache put")
        cache.put(event.request, response.clone())
    });
    <% [0, 1, 2, 3,4, 5].each do |i|%>
    <% if $redis.get('mainimage'+ i.to_s) != nil %>
      fetch('<%= URI::encode($redis.get('mainimage'+i.to_s).force_encoding('ASCII-8BIT')) %>', {
          mode: 'no-cors'
      }).then(function(response) {
          console.log(response.type);
          console.log("cache put")
          cache.put(event.request, response.clone())
          // "opaque"
      });
    <% end %>
   <% end %>
    <% Product.all.each do |product|%>
      <% if product.image0 != nil and product.image0.path != nil %>
        fetch('https://d1eq7v76s8dt2n.cloudfront.net/'+ '<%= URI::encode(product.image0.path.force_encoding('ASCII-8BIT')) %>', {
            mode: 'no-cors'
        }).then(function(response) {
            console.log(response.type);
            console.log("cache put")
            cache.put(event.request, response.clone())
            // "opaque"
        });
      <% end %>
    <% end %>
    <% ProductOption.all.each do |product_option|%>
      <% if product_option.image0 != nil and product_option.image0.path != nil %>
        fetch('https://d1eq7v76s8dt2n.cloudfront.net/'+ '<%= URI::encode(product_option.image0.path.force_encoding('ASCII-8BIT')) %>', {
            mode: 'no-cors'
        }).then(function(response) {
            console.log(response.type);
            console.log("cache put")
            cache.put(event.request, response.clone())
            // "opaque"
        });
      <% end %>
    <% end %>
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
        return cache.addAll([
        '/offline.html',
          'https://s3.ap-northeast-2.amazonaws.com/static.channel.io/emoji/v3/emojis.min.json',
          'https://stackpath.bootstrapcdn.com/bootstrap/4.1.2/css/bootstrap.min.css',
          'https://fonts.googleapis.com/css?family=Noto+Sans:400,700',
          'https://fonts.googleapis.com/earlyaccess/notosanskr.css',
          'https://use.fontawesome.com/releases/v5.2.0/css/all.css',
          'https://use.fontawesome.com/releases/v5.2.0/css/all.css',
          'https://code.jquery.com/jquery-3.3.1.slim.min.js',
          'https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js',
          'https://stackpath.bootstrapcdn.com/bootstrap/4.1.2/js/bootstrap.min.js'
    ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
          caches.match(event.request)
              .then(function (response) {
                  if(response){
                      console.log("ok response")
                      console.log(response)
                      return response
                  }
                  var fetchRequest = event.request.clone();
                  return fetch(fetchRequest).then(
                      function (response) {
                          // Check if we received a valid response
                          if(!response || response.status == 0 || response.type == 'opaque') {
                           //   console.log('red')
                           //   console.log(response)
                              console.log('fuck!')
                              console.log(response)
                              return response;
                          }
                          console.log('red!')
                          console.log(response)
                          var responseToCache = response.clone();

                          caches.open(CACHE_NAME)
                              .then(function(cache) {
                                  cache.put(event.request, responseToCache);
                              });

                          return response;
                      }
                  )
              })
  )
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);